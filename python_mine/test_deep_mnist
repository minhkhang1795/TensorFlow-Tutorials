from deep_mnist import *
import cv2
import numpy as np

# Blank 28x28 image
blank_image = cv2.imread('one.png', 0)
data = np.reshape(blank_image, (-1, 784))
batch = mnist.train.next_batch(50)
print batch[0]
# print blank_image
# print data
# def predict_image(images):
#     # TODO: prediction https://stackoverflow.com/questions/33711556/making-predictions-with-a-tensorflow-model
#     # TODO: https://github.com/tensorflow/tensorflow/issues/97O
#     # TODO: https://github.com/EddieOne/mnist-live-test/blob/master/mnist_softmax.py
#     y2 = tf.nn.softmax(y_conv)
#     feed_dict = {x: images, y_: [[0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], keep_prob: 1}
#     # prediction_val = sess.run(y2, feed_dict=feed_dict)
#     prediction_val = y2.eval(feed_dict=feed_dict)
#     print prediction_val
#     # sess.close()
#
#
# with tf.Session() as sess:
#     sess.run(tf.global_variables_initializer())
#     for i in range(400):
#         batch = mnist.train.next_batch(50)
#         if i % 100 == 0:
#             train_accuracy = accuracy.eval(feed_dict={
#                 x: batch[0], y_: batch[1], keep_prob: 1.0})
#             print('step %d, training accuracy %g' % (i, train_accuracy))
#         train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})
#
#     predict_image(data)
